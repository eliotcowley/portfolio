@inject HttpClient Http

    <div class="spinner-border @(loaded ? "invisible" : "")" role="status" />

<div class="@(fade ? "" : "invisible") @(fade ? "fade-in" : "")">
    @this.html
    <a class="btn btn-light" href="/blog/@this.url">Read more</a>
</div>

@code {
    [Parameter]
    public string FilePath { get; set; }
    private string filePath;

    private MarkupString html;
    private string url;
    private string firstPara;
    private bool fade = true;
    private bool loaded = false;

    public async Task Refresh()
    {
        await CreatePostComponent();
        StateHasChanged();
        this.fade = true;
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await CreatePostComponent();
    }

    protected async override Task OnParametersSetAsync()
    {
        this.loaded = false;
        this.fade = false;
        await Refresh();
    }

    private async Task CreatePostComponent()
    {
        this.filePath = FilePath;
        string path = @"blog-posts/" + this.filePath;
        string markdown = await Http.GetStringAsync(path);
        StringReader stringReader = new StringReader(markdown);
        StringBuilder stringBuilder = new StringBuilder();

        while (true)
        {
            string s = stringReader.ReadLine();

            if (s == null)
            {
                break;
            }

            if (s == string.Empty)
            {
                continue;
            }

            if (s.StartsWith('#'))
            {
                stringBuilder.AppendLine(s.Trim());
                continue;
            }

            stringBuilder.AppendLine(s.Trim());
            break;
        }

        this.firstPara = stringBuilder.ToString();
        string htmlString = Markdown.ToHtml(this.firstPara);
        this.html = new MarkupString(htmlString);
        this.url = this.filePath.Split('.')[0];
        this.loaded = true;
    }
}
